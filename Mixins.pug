mixin Def(type, defName, label)
  #{type+"Def"}&attributes(attributes)
    defName!=defName
    if label
      label!=label
    if block
      block

mixin SimpleThinkNode(name)
  li(Class=name)/

mixin ThinkNode(name, extra)
  unless block || extra
    +SimpleThinkNode(name)
  else
    li(Class=name)
      if extra
        each data, key in extra
          #{key}!= data
          
      if block
        subNodes
          block

mixin ThinkNodeSubtree(name)
  li(Class="ThinkNode_Subtree")
    treeDef!= name

mixin ThinkTreeDef(defName, thinkRoot="ThinkNode_Priority")
  +Def("ThinkTree", defName)&attributes(attributes)
    thinkRoot(Class=thinkRoot)
      subNodes
        block

mixin Array(tag, elements)
  #{tag}
    each element in elements
      if typeof(element) === "object"
        li
          +Object(element)
      else
        li=element
  
mixin Object(object)
  each value, key in object
    #{key}=value